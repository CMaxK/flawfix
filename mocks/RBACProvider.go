// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	accesscontrol "github.com/l3montree-dev/flawfix/internal/accesscontrol"
	mock "github.com/stretchr/testify/mock"
)

// RBACProvider is an autogenerated mock type for the RBACProvider type
type RBACProvider struct {
	mock.Mock
}

// DomainsOfUser provides a mock function with given fields: user
func (_m *RBACProvider) DomainsOfUser(user string) ([]string, error) {
	ret := _m.Called(user)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomainRBAC provides a mock function with given fields: domain
func (_m *RBACProvider) GetDomainRBAC(domain string) accesscontrol.AccessControl {
	ret := _m.Called(domain)

	var r0 accesscontrol.AccessControl
	if rf, ok := ret.Get(0).(func(string) accesscontrol.AccessControl); ok {
		r0 = rf(domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(accesscontrol.AccessControl)
		}
	}

	return r0
}

// NewRBACProvider creates a new instance of RBACProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRBACProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *RBACProvider {
	mock := &RBACProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
