// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	flaw "github.com/l3montree-dev/flawfix/internal/core/flaw"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: tx, t
func (_m *Repository) Create(tx *gorm.DB, t *flaw.Model) error {
	ret := _m.Called(tx, t)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *flaw.Model) error); ok {
		r0 = rf(tx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: tx, id
func (_m *Repository) Delete(tx *gorm.DB, id uuid.UUID) error {
	ret := _m.Called(tx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ids
func (_m *Repository) List(ids []uuid.UUID) ([]flaw.Model, error) {
	ret := _m.Called(ids)

	var r0 []flaw.Model
	var r1 error
	if rf, ok := ret.Get(0).(func([]uuid.UUID) ([]flaw.Model, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]uuid.UUID) []flaw.Model); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flaw.Model)
		}
	}

	if rf, ok := ret.Get(1).(func([]uuid.UUID) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: id
func (_m *Repository) Read(id uuid.UUID) (flaw.Model, error) {
	ret := _m.Called(id)

	var r0 flaw.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (flaw.Model, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) flaw.Model); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(flaw.Model)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transaction provides a mock function with given fields: _a0
func (_m *Repository) Transaction(_a0 func(*gorm.DB) error) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*gorm.DB) error) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: tx, t
func (_m *Repository) Update(tx *gorm.DB, t *flaw.Model) error {
	ret := _m.Called(tx, t)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *flaw.Model) error); ok {
		r0 = rf(tx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
