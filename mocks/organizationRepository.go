// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	uuid "github.com/google/uuid"
	models "github.com/l3montree-dev/flawfix/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// organizationRepository is an autogenerated mock type for the organizationRepository type
type organizationRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *organizationRepository) Create(_a0 *models.Organization) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Organization) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0
func (_m *organizationRepository) Delete(_a0 uuid.UUID) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: _a0
func (_m *organizationRepository) List(_a0 []uuid.UUID) ([]models.Organization, error) {
	ret := _m.Called(_a0)

	var r0 []models.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func([]uuid.UUID) ([]models.Organization, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]uuid.UUID) []models.Organization); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func([]uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: _a0
func (_m *organizationRepository) Read(_a0 uuid.UUID) (models.Organization, error) {
	ret := _m.Called(_a0)

	var r0 models.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (models.Organization, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) models.Organization); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(models.Organization)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *organizationRepository) Update(_a0 *models.Organization) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Organization) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newOrganizationRepository creates a new instance of organizationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newOrganizationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *organizationRepository {
	mock := &organizationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
