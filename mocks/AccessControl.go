// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	accesscontrol "github.com/l3montree-dev/flawfix/internal/accesscontrol"
	mock "github.com/stretchr/testify/mock"
)

// AccessControl is an autogenerated mock type for the AccessControl type
type AccessControl struct {
	mock.Mock
}

// AllowRole provides a mock function with given fields: role, object, action
func (_m *AccessControl) AllowRole(role string, object string, action []accesscontrol.Action) error {
	ret := _m.Called(role, object, action)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []accesscontrol.Action) error); ok {
		r0 = rf(role, object, action)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AllowRoleInProject provides a mock function with given fields: project, role, object, action
func (_m *AccessControl) AllowRoleInProject(project string, role string, object string, action []accesscontrol.Action) error {
	ret := _m.Called(project, role, object, action)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, []accesscontrol.Action) error); ok {
		r0 = rf(project, role, object, action)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllRoles provides a mock function with given fields: user
func (_m *AccessControl) GetAllRoles(user string) []string {
	ret := _m.Called(user)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GrantRole provides a mock function with given fields: subject, role
func (_m *AccessControl) GrantRole(subject string, role string) error {
	ret := _m.Called(subject, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(subject, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GrantRoleInProject provides a mock function with given fields: subject, role, project
func (_m *AccessControl) GrantRoleInProject(subject string, role string, project string) error {
	ret := _m.Called(subject, role, project)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(subject, role, project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HasAccess provides a mock function with given fields: subject
func (_m *AccessControl) HasAccess(subject string) bool {
	ret := _m.Called(subject)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(subject)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// InheritProjectRole provides a mock function with given fields: roleWhichGetsPermissions, roleWhichProvidesPermissions, project
func (_m *AccessControl) InheritProjectRole(roleWhichGetsPermissions string, roleWhichProvidesPermissions string, project string) error {
	ret := _m.Called(roleWhichGetsPermissions, roleWhichProvidesPermissions, project)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(roleWhichGetsPermissions, roleWhichProvidesPermissions, project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InheritRole provides a mock function with given fields: roleWhichGetsPermissions, roleWhichProvidesPermissions
func (_m *AccessControl) InheritRole(roleWhichGetsPermissions string, roleWhichProvidesPermissions string) error {
	ret := _m.Called(roleWhichGetsPermissions, roleWhichProvidesPermissions)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(roleWhichGetsPermissions, roleWhichProvidesPermissions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsAllowed provides a mock function with given fields: subject, object, action
func (_m *AccessControl) IsAllowed(subject string, object string, action accesscontrol.Action) (bool, error) {
	ret := _m.Called(subject, object, action)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, accesscontrol.Action) (bool, error)); ok {
		return rf(subject, object, action)
	}
	if rf, ok := ret.Get(0).(func(string, string, accesscontrol.Action) bool); ok {
		r0 = rf(subject, object, action)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string, accesscontrol.Action) error); ok {
		r1 = rf(subject, object, action)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAllowedInProject provides a mock function with given fields: project, user, object, action
func (_m *AccessControl) IsAllowedInProject(project string, user string, object string, action accesscontrol.Action) (bool, error) {
	ret := _m.Called(project, user, object, action)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, accesscontrol.Action) (bool, error)); ok {
		return rf(project, user, object, action)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, accesscontrol.Action) bool); ok {
		r0 = rf(project, user, object, action)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, accesscontrol.Action) error); ok {
		r1 = rf(project, user, object, action)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkDomainAndProjectRole provides a mock function with given fields: domainRoleWhichGetsPermission, projectRoleWhichProvidesPermissions, project
func (_m *AccessControl) LinkDomainAndProjectRole(domainRoleWhichGetsPermission string, projectRoleWhichProvidesPermissions string, project string) error {
	ret := _m.Called(domainRoleWhichGetsPermission, projectRoleWhichProvidesPermissions, project)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(domainRoleWhichGetsPermission, projectRoleWhichProvidesPermissions, project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokeRole provides a mock function with given fields: subject, role
func (_m *AccessControl) RevokeRole(subject string, role string) error {
	ret := _m.Called(subject, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(subject, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokeRoleInProject provides a mock function with given fields: subject, role, project
func (_m *AccessControl) RevokeRoleInProject(subject string, role string, project string) error {
	ret := _m.Called(subject, role, project)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(subject, role, project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAccessControl creates a new instance of AccessControl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccessControl(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccessControl {
	mock := &AccessControl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
