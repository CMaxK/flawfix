// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	env "github.com/l3montree-dev/flawfix/internal/core/env"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateDefaultEnvForApp provides a mock function with given fields: tx, applicationID
func (_m *Service) CreateDefaultEnvForApp(tx *gorm.DB, applicationID uuid.UUID) ([]env.Model, error) {
	ret := _m.Called(tx, applicationID)

	var r0 []env.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID) ([]env.Model, error)); ok {
		return rf(tx, applicationID)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID) []env.Model); ok {
		r0 = rf(tx, applicationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]env.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, uuid.UUID) error); ok {
		r1 = rf(tx, applicationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
