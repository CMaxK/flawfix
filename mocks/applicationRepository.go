// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	uuid "github.com/google/uuid"
	models "github.com/l3montree-dev/flawfix/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// applicationRepository is an autogenerated mock type for the applicationRepository type
type applicationRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: tx, t
func (_m *applicationRepository) Create(tx interface{}, t *models.Application) error {
	ret := _m.Called(tx, t)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, *models.Application) error); ok {
		r0 = rf(tx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: tx, id
func (_m *applicationRepository) Delete(tx interface{}, id uuid.UUID) error {
	ret := _m.Called(tx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uuid.UUID) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByProjectID provides a mock function with given fields: _a0
func (_m *applicationRepository) GetByProjectID(_a0 uuid.UUID) ([]models.Application, error) {
	ret := _m.Called(_a0)

	var r0 []models.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]models.Application, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.Application); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ids
func (_m *applicationRepository) List(ids []uuid.UUID) ([]models.Application, error) {
	ret := _m.Called(ids)

	var r0 []models.Application
	var r1 error
	if rf, ok := ret.Get(0).(func([]uuid.UUID) ([]models.Application, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]uuid.UUID) []models.Application); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Application)
		}
	}

	if rf, ok := ret.Get(1).(func([]uuid.UUID) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: id
func (_m *applicationRepository) Read(id uuid.UUID) (models.Application, error) {
	ret := _m.Called(id)

	var r0 models.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (models.Application, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) models.Application); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Application)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transaction provides a mock function with given fields: _a0
func (_m *applicationRepository) Transaction(_a0 func(interface{}) error) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(interface{}) error) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: tx, t
func (_m *applicationRepository) Update(tx interface{}, t *models.Application) error {
	ret := _m.Called(tx, t)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, *models.Application) error); ok {
		r0 = rf(tx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newApplicationRepository creates a new instance of applicationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newApplicationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *applicationRepository {
	mock := &applicationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
