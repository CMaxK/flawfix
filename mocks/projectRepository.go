// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	uuid "github.com/google/uuid"
	models "github.com/l3montree-dev/flawfix/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// projectRepository is an autogenerated mock type for the projectRepository type
type projectRepository struct {
	mock.Mock
}

// ReadBySlug provides a mock function with given fields: organizationID, slug
func (_m *projectRepository) ReadBySlug(organizationID uuid.UUID, slug string) (models.Project, error) {
	ret := _m.Called(organizationID, slug)

	var r0 models.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) (models.Project, error)); ok {
		return rf(organizationID, slug)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) models.Project); ok {
		r0 = rf(organizationID, slug)
	} else {
		r0 = ret.Get(0).(models.Project)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(organizationID, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newProjectRepository creates a new instance of projectRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newProjectRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *projectRepository {
	mock := &projectRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
