// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	application "github.com/l3montree-dev/flawfix/internal/core/application"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ApplicationRepository is an autogenerated mock type for the Repository type
type ApplicationRepository struct {
	mock.Mock
}

type ApplicationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ApplicationRepository) EXPECT() *ApplicationRepository_Expecter {
	return &ApplicationRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: tx, t
func (_m *ApplicationRepository) Create(tx *gorm.DB, t *application.Model) error {
	ret := _m.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *application.Model) error); ok {
		r0 = rf(tx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApplicationRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ApplicationRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - tx *gorm.DB
//   - t *application.Model
func (_e *ApplicationRepository_Expecter) Create(tx interface{}, t interface{}) *ApplicationRepository_Create_Call {
	return &ApplicationRepository_Create_Call{Call: _e.mock.On("Create", tx, t)}
}

func (_c *ApplicationRepository_Create_Call) Run(run func(tx *gorm.DB, t *application.Model)) *ApplicationRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*application.Model))
	})
	return _c
}

func (_c *ApplicationRepository_Create_Call) Return(_a0 error) *ApplicationRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ApplicationRepository_Create_Call) RunAndReturn(run func(*gorm.DB, *application.Model) error) *ApplicationRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: tx, id
func (_m *ApplicationRepository) Delete(tx *gorm.DB, id uuid.UUID) error {
	ret := _m.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApplicationRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ApplicationRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - tx *gorm.DB
//   - id uuid.UUID
func (_e *ApplicationRepository_Expecter) Delete(tx interface{}, id interface{}) *ApplicationRepository_Delete_Call {
	return &ApplicationRepository_Delete_Call{Call: _e.mock.On("Delete", tx, id)}
}

func (_c *ApplicationRepository_Delete_Call) Run(run func(tx *gorm.DB, id uuid.UUID)) *ApplicationRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ApplicationRepository_Delete_Call) Return(_a0 error) *ApplicationRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ApplicationRepository_Delete_Call) RunAndReturn(run func(*gorm.DB, uuid.UUID) error) *ApplicationRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByName provides a mock function with given fields: name
func (_m *ApplicationRepository) FindByName(name string) (application.Model, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for FindByName")
	}

	var r0 application.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (application.Model, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) application.Model); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(application.Model)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationRepository_FindByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByName'
type ApplicationRepository_FindByName_Call struct {
	*mock.Call
}

// FindByName is a helper method to define mock.On call
//   - name string
func (_e *ApplicationRepository_Expecter) FindByName(name interface{}) *ApplicationRepository_FindByName_Call {
	return &ApplicationRepository_FindByName_Call{Call: _e.mock.On("FindByName", name)}
}

func (_c *ApplicationRepository_FindByName_Call) Run(run func(name string)) *ApplicationRepository_FindByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ApplicationRepository_FindByName_Call) Return(_a0 application.Model, _a1 error) *ApplicationRepository_FindByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ApplicationRepository_FindByName_Call) RunAndReturn(run func(string) (application.Model, error)) *ApplicationRepository_FindByName_Call {
	_c.Call.Return(run)
	return _c
}

// FindOrCreate provides a mock function with given fields: tx, name
func (_m *ApplicationRepository) FindOrCreate(tx *gorm.DB, name string) (application.Model, error) {
	ret := _m.Called(tx, name)

	if len(ret) == 0 {
		panic("no return value specified for FindOrCreate")
	}

	var r0 application.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) (application.Model, error)); ok {
		return rf(tx, name)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) application.Model); ok {
		r0 = rf(tx, name)
	} else {
		r0 = ret.Get(0).(application.Model)
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string) error); ok {
		r1 = rf(tx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationRepository_FindOrCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOrCreate'
type ApplicationRepository_FindOrCreate_Call struct {
	*mock.Call
}

// FindOrCreate is a helper method to define mock.On call
//   - tx *gorm.DB
//   - name string
func (_e *ApplicationRepository_Expecter) FindOrCreate(tx interface{}, name interface{}) *ApplicationRepository_FindOrCreate_Call {
	return &ApplicationRepository_FindOrCreate_Call{Call: _e.mock.On("FindOrCreate", tx, name)}
}

func (_c *ApplicationRepository_FindOrCreate_Call) Run(run func(tx *gorm.DB, name string)) *ApplicationRepository_FindOrCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string))
	})
	return _c
}

func (_c *ApplicationRepository_FindOrCreate_Call) Return(_a0 application.Model, _a1 error) *ApplicationRepository_FindOrCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ApplicationRepository_FindOrCreate_Call) RunAndReturn(run func(*gorm.DB, string) (application.Model, error)) *ApplicationRepository_FindOrCreate_Call {
	_c.Call.Return(run)
	return _c
}

// GetApplicationIDBySlug provides a mock function with given fields: projectID, slug
func (_m *ApplicationRepository) GetApplicationIDBySlug(projectID uuid.UUID, slug string) (uuid.UUID, error) {
	ret := _m.Called(projectID, slug)

	if len(ret) == 0 {
		panic("no return value specified for GetApplicationIDBySlug")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) (uuid.UUID, error)); ok {
		return rf(projectID, slug)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) uuid.UUID); ok {
		r0 = rf(projectID, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(projectID, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationRepository_GetApplicationIDBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApplicationIDBySlug'
type ApplicationRepository_GetApplicationIDBySlug_Call struct {
	*mock.Call
}

// GetApplicationIDBySlug is a helper method to define mock.On call
//   - projectID uuid.UUID
//   - slug string
func (_e *ApplicationRepository_Expecter) GetApplicationIDBySlug(projectID interface{}, slug interface{}) *ApplicationRepository_GetApplicationIDBySlug_Call {
	return &ApplicationRepository_GetApplicationIDBySlug_Call{Call: _e.mock.On("GetApplicationIDBySlug", projectID, slug)}
}

func (_c *ApplicationRepository_GetApplicationIDBySlug_Call) Run(run func(projectID uuid.UUID, slug string)) *ApplicationRepository_GetApplicationIDBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string))
	})
	return _c
}

func (_c *ApplicationRepository_GetApplicationIDBySlug_Call) Return(_a0 uuid.UUID, _a1 error) *ApplicationRepository_GetApplicationIDBySlug_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ApplicationRepository_GetApplicationIDBySlug_Call) RunAndReturn(run func(uuid.UUID, string) (uuid.UUID, error)) *ApplicationRepository_GetApplicationIDBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// GetByProjectID provides a mock function with given fields: projectID
func (_m *ApplicationRepository) GetByProjectID(projectID uuid.UUID) ([]application.Model, error) {
	ret := _m.Called(projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetByProjectID")
	}

	var r0 []application.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]application.Model, error)); ok {
		return rf(projectID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []application.Model); ok {
		r0 = rf(projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]application.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationRepository_GetByProjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByProjectID'
type ApplicationRepository_GetByProjectID_Call struct {
	*mock.Call
}

// GetByProjectID is a helper method to define mock.On call
//   - projectID uuid.UUID
func (_e *ApplicationRepository_Expecter) GetByProjectID(projectID interface{}) *ApplicationRepository_GetByProjectID_Call {
	return &ApplicationRepository_GetByProjectID_Call{Call: _e.mock.On("GetByProjectID", projectID)}
}

func (_c *ApplicationRepository_GetByProjectID_Call) Run(run func(projectID uuid.UUID)) *ApplicationRepository_GetByProjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *ApplicationRepository_GetByProjectID_Call) Return(_a0 []application.Model, _a1 error) *ApplicationRepository_GetByProjectID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ApplicationRepository_GetByProjectID_Call) RunAndReturn(run func(uuid.UUID) ([]application.Model, error)) *ApplicationRepository_GetByProjectID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ids
func (_m *ApplicationRepository) List(ids []uuid.UUID) ([]application.Model, error) {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []application.Model
	var r1 error
	if rf, ok := ret.Get(0).(func([]uuid.UUID) ([]application.Model, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]uuid.UUID) []application.Model); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]application.Model)
		}
	}

	if rf, ok := ret.Get(1).(func([]uuid.UUID) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ApplicationRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ids []uuid.UUID
func (_e *ApplicationRepository_Expecter) List(ids interface{}) *ApplicationRepository_List_Call {
	return &ApplicationRepository_List_Call{Call: _e.mock.On("List", ids)}
}

func (_c *ApplicationRepository_List_Call) Run(run func(ids []uuid.UUID)) *ApplicationRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]uuid.UUID))
	})
	return _c
}

func (_c *ApplicationRepository_List_Call) Return(_a0 []application.Model, _a1 error) *ApplicationRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ApplicationRepository_List_Call) RunAndReturn(run func([]uuid.UUID) ([]application.Model, error)) *ApplicationRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: id
func (_m *ApplicationRepository) Read(id uuid.UUID) (application.Model, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 application.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (application.Model, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) application.Model); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(application.Model)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type ApplicationRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *ApplicationRepository_Expecter) Read(id interface{}) *ApplicationRepository_Read_Call {
	return &ApplicationRepository_Read_Call{Call: _e.mock.On("Read", id)}
}

func (_c *ApplicationRepository_Read_Call) Run(run func(id uuid.UUID)) *ApplicationRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *ApplicationRepository_Read_Call) Return(_a0 application.Model, _a1 error) *ApplicationRepository_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ApplicationRepository_Read_Call) RunAndReturn(run func(uuid.UUID) (application.Model, error)) *ApplicationRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// ReadBySlug provides a mock function with given fields: projectID, slug
func (_m *ApplicationRepository) ReadBySlug(projectID uuid.UUID, slug string) (application.Model, error) {
	ret := _m.Called(projectID, slug)

	if len(ret) == 0 {
		panic("no return value specified for ReadBySlug")
	}

	var r0 application.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) (application.Model, error)); ok {
		return rf(projectID, slug)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) application.Model); ok {
		r0 = rf(projectID, slug)
	} else {
		r0 = ret.Get(0).(application.Model)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(projectID, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationRepository_ReadBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadBySlug'
type ApplicationRepository_ReadBySlug_Call struct {
	*mock.Call
}

// ReadBySlug is a helper method to define mock.On call
//   - projectID uuid.UUID
//   - slug string
func (_e *ApplicationRepository_Expecter) ReadBySlug(projectID interface{}, slug interface{}) *ApplicationRepository_ReadBySlug_Call {
	return &ApplicationRepository_ReadBySlug_Call{Call: _e.mock.On("ReadBySlug", projectID, slug)}
}

func (_c *ApplicationRepository_ReadBySlug_Call) Run(run func(projectID uuid.UUID, slug string)) *ApplicationRepository_ReadBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string))
	})
	return _c
}

func (_c *ApplicationRepository_ReadBySlug_Call) Return(_a0 application.Model, _a1 error) *ApplicationRepository_ReadBySlug_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ApplicationRepository_ReadBySlug_Call) RunAndReturn(run func(uuid.UUID, string) (application.Model, error)) *ApplicationRepository_ReadBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function with given fields: _a0
func (_m *ApplicationRepository) Transaction(_a0 func(*gorm.DB) error) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*gorm.DB) error) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApplicationRepository_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type ApplicationRepository_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - _a0 func(*gorm.DB) error
func (_e *ApplicationRepository_Expecter) Transaction(_a0 interface{}) *ApplicationRepository_Transaction_Call {
	return &ApplicationRepository_Transaction_Call{Call: _e.mock.On("Transaction", _a0)}
}

func (_c *ApplicationRepository_Transaction_Call) Run(run func(_a0 func(*gorm.DB) error)) *ApplicationRepository_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*gorm.DB) error))
	})
	return _c
}

func (_c *ApplicationRepository_Transaction_Call) Return(_a0 error) *ApplicationRepository_Transaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ApplicationRepository_Transaction_Call) RunAndReturn(run func(func(*gorm.DB) error) error) *ApplicationRepository_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: tx, t
func (_m *ApplicationRepository) Update(tx *gorm.DB, t *application.Model) error {
	ret := _m.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *application.Model) error); ok {
		r0 = rf(tx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApplicationRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ApplicationRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - tx *gorm.DB
//   - t *application.Model
func (_e *ApplicationRepository_Expecter) Update(tx interface{}, t interface{}) *ApplicationRepository_Update_Call {
	return &ApplicationRepository_Update_Call{Call: _e.mock.On("Update", tx, t)}
}

func (_c *ApplicationRepository_Update_Call) Run(run func(tx *gorm.DB, t *application.Model)) *ApplicationRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*application.Model))
	})
	return _c
}

func (_c *ApplicationRepository_Update_Call) Return(_a0 error) *ApplicationRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ApplicationRepository_Update_Call) RunAndReturn(run func(*gorm.DB, *application.Model) error) *ApplicationRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewApplicationRepository creates a new instance of ApplicationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplicationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApplicationRepository {
	mock := &ApplicationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
