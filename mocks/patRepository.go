// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	uuid "github.com/google/uuid"
	models "github.com/l3montree-dev/flawfix/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// patRepository is an autogenerated mock type for the patRepository type
type patRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *patRepository) Create(_a0 *models.PersonalAccessToken) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.PersonalAccessToken) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *patRepository) Delete(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: userId
func (_m *patRepository) List(userId string) ([]models.PersonalAccessToken, error) {
	ret := _m.Called(userId)

	var r0 []models.PersonalAccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.PersonalAccessToken, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) []models.PersonalAccessToken); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.PersonalAccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: id
func (_m *patRepository) Read(id uuid.UUID) (models.PersonalAccessToken, error) {
	ret := _m.Called(id)

	var r0 models.PersonalAccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (models.PersonalAccessToken, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) models.PersonalAccessToken); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.PersonalAccessToken)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadByToken provides a mock function with given fields: token
func (_m *patRepository) ReadByToken(token string) (models.PersonalAccessToken, error) {
	ret := _m.Called(token)

	var r0 models.PersonalAccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.PersonalAccessToken, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) models.PersonalAccessToken); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(models.PersonalAccessToken)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newPatRepository creates a new instance of patRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newPatRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *patRepository {
	mock := &patRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
